{"version":3,"sources":["components/Header/Header.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Dialogs/DialogItems/DialogItem.tsx","components/Dialogs/Messages/Message.tsx","components/Dialogs/Dialogs.tsx","components/Header/Header.tsx","components/Navbar/Navbar.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Music/Music.tsx","components/News/News.tsx","components/Setting/Setting.tsx","redux/state.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/Navbar/Navbar.module.css","components/Dialogs/Dialogs.module.css"],"names":["module","exports","DialogItem","props","className","d","dialog","active","to","id","name","Message","message","mes","Dialogs","dialogs","dialogsItems","dialogsData","map","messageItems","messagesData","m","Header","hed","header","src","alt","title","Navbar","classes","nav","item","activeClassName","Post","post","likeCount","MyPosts","postElement","posts","p","newPostElement","React","createRef","mypost","block","area","ref","value","newPostText","onChange","e","dispatch","type","newText","currentTarget","onClick","text","current","postMessage","ProfileInfo","content","background","ava","Profile","profileData","postData","Music","News","Setting","store","_state","profile","_callSubscriber","console","log","getState","this","subscribe","observer","action","newPost","push","App","appState","render","path","bind","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rerenderEntireTree","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b769fdf2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2IiT1\",\"title\":\"Header_title__1PnPN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"MyPosts_block__1KfWR\",\"area\":\"MyPosts_area__3QX9_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1drbq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProfileInfo_content__1ydn2\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport d from \"./../Dialogs.module.css\"\r\n\r\n\r\n\r\ntype DialogItemType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nexport function DialogItem(props: DialogItemType) {\r\n    return (\r\n        <div className={`${d.dialog} ${d.active}`}>\r\n            <NavLink to={`/dialogs/${props.id}`}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport d from \"./../Dialogs.module.css\"\r\n\r\n\r\nexport type MessageType = {\r\n    mes: string\r\n}\r\n\r\nexport function Message(props: MessageType) {\r\n    return (\r\n        <div className={d.message}>{props.mes}</div>\r\n    )\r\n}\r\n\r\n    ","import React from 'react';\r\nimport { DialogsType } from '../../redux/state';\r\nimport { DialogItem } from './DialogItems/DialogItem';\r\nimport d from \"./Dialogs.module.css\"\r\nimport { Message } from './Messages/Message';\r\n\r\n\r\n\r\nexport function Dialogs(props: DialogsType) {\r\n    return (\r\n        <div className={d.dialogs}>\r\n            <div className={d.dialogsItems}>\r\n                {props.dialogsData.map(d => <DialogItem name={d.name} id={d.id} />)}\r\n\r\n            </div>\r\n\r\n            <div className={d.messageItems}>\r\n                {props.messagesData.map(m=><Message mes={m.message} />)}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport hed from './Header.module.css';\r\n\r\nexport function Header(props:any) {\r\n    return (\r\n        <header className={hed.header}>\r\n            <img src=\"https://i.ibb.co/yV486Q1/logo.png\" alt=\"Logo\" />\r\n            <span className = {hed.title}>Free Land</span>\r\n        </header>)\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport classes from './Navbar.module.css'\r\n\r\n\r\nexport function Navbar() {\r\n    return (\r\n        <nav className={classes.nav}>\r\n            <div className={classes.item} ><NavLink to=\"/profile\" activeClassName={classes.active}> Profile</NavLink></div>\r\n            <div className={classes.item}><NavLink to=\"/dialogs\" activeClassName={classes.active}>Messages</NavLink></div>\r\n            <div className={classes.item}><NavLink to=\"/news\" activeClassName={classes.active}>News</NavLink></div>\r\n            <div className={classes.item}><NavLink to=\"/music\" activeClassName={classes.active}>Music</NavLink></div>\r\n            <div className={classes.item}><NavLink to=\"/setting\" activeClassName={classes.active}>Setting</NavLink></div>\r\n        </nav>\r\n    )\r\n}","import React from 'react';\r\nimport post from './Post.module.css'\r\n\r\n\r\nexport type PostType1 = {\r\n    message: string\r\n    src: string\r\n    likeCount: string\r\n    \r\n}\r\n\r\nexport function Post(props: PostType1) {\r\n    return (\r\n\r\n        <div className={post.item}>\r\n            <img src={props.src} alt=\"\" />\r\n            {props.message}\r\n            <button>Like({props.likeCount})</button>\r\n            <button>DisLike</button>\r\n        </div>\r\n\r\n\r\n    )\r\n}","import React from 'react';\r\nimport { ActionTypes, PostDataType } from '../../../redux/state';\r\nimport mypost from './MyPosts.module.css'\r\nimport { Post } from './Post/Post';\r\n\r\ntype MyPostType = {\r\n    posts: Array<PostDataType>\r\n    newPostText: string\r\n    dispatch: (action: ActionTypes) => void\r\n\r\n}\r\n\r\nexport function MyPosts(props: MyPostType) {\r\n\r\n    const postElement = props.posts.map(p => <Post message={p.message} src={p.src} likeCount={p.likeCount} />)\r\n\r\n    const newPostElement = React.createRef<HTMLTextAreaElement>();\r\n    const addPost = () => {\r\n        let text = newPostElement.current?.value; //  newPostElement.current &&  newPostElement.current.value; (Если элемент существует то возьмем его значение)\r\n        if (text) {\r\n            props.dispatch({type:\"ADD-POST\", postMessage: text})\r\n        };\r\n        props.dispatch({type: \"UPDATE-POST-TEXT\", newText: \" \"})\r\n    }\r\n    const onPostChange = (e:any) => {\r\n        props.dispatch({type: \"UPDATE-POST-TEXT\", newText:e.currentTarget.value})\r\n    }\r\n    // const onPostChange = () => {\r\n    //     let text = newPostElement.current?.value;\r\n    //     props.updateNewPostText(text);\r\n    // }\r\n    return (\r\n        <div className={mypost.block}>\r\n            <h3>My posts</h3>\r\n            <div >\r\n                <div>\r\n                    <textarea className={mypost.area} ref={newPostElement} value={props.newPostText} onChange={onPostChange} />\r\n                </div>\r\n                <div>\r\n                    <button onClick={addPost}>Add Post</button>\r\n                </div>\r\n            </div>\r\n            {postElement}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { ProfileDataType } from '../../../redux/state';\r\nimport p from './ProfileInfo.module.css'\r\n\r\n\r\n\r\n  \r\n  export function ProfileInfo(props: ProfileDataType) {\r\n    return (\r\n      <div className={p.content}>\r\n        <img src={props.background} alt=\"\" />\r\n        <div>{props.ava} </div>\r\n      </div>\r\n    )\r\n  }","import React from 'react';\r\nimport { ProfileType } from '../../redux/state';\r\nimport { MyPosts } from './MyPosts/MyPosts';\r\nimport prof from './Profile.module.css'\r\nimport { ProfileInfo} from './ProfileInfo/ProfileInfo';\r\n\r\n\r\n\r\n\r\nexport function Profile(props: ProfileType) {\r\n  return (\r\n    <div className=\"container\">\r\n      <ProfileInfo background={props.profileData[0].background} ava={props.profileData[0].ava} />\r\n      <MyPosts posts={props.postData}  newPostText = {props.newPostText} dispatch={props.dispatch}/>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\n\r\n\r\nexport function Music(props:any) {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\n\r\nexport function News(props:any) {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\n\r\nexport function Setting(props:any) {\r\n    return (\r\n        <div>\r\n            Setting\r\n        </div>\r\n    )\r\n}","\r\n\r\nexport type UserType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nexport type UserMessageType = {\r\n    id: string\r\n    message: string\r\n}\r\n\r\nexport type PostDataType = {\r\n    id: string\r\n    message: string\r\n    src: string\r\n    likeCount: string\r\n}\r\n\r\nexport type ProfileDataType = {\r\n    background: string\r\n    ava: string\r\n}\r\n\r\nexport type DialogsType = {\r\n    dialogsData: Array<UserType>\r\n    messagesData: Array<UserMessageType>\r\n}\r\nexport type ProfileType = {\r\n    postData: Array<PostDataType>\r\n    newPostText: string\r\n    profileData: Array<ProfileDataType>\r\n    dispatch: (action: ActionTypes) => void\r\n}\r\nexport type ProfileStateType = {\r\n    postData: Array<PostDataType>\r\n    newPostText: string\r\n    profileData: Array<ProfileDataType>\r\n}\r\nexport type StateType = {\r\n    dialogs: DialogsType\r\n    profile: ProfileStateType\r\n}\r\nexport type StoreType = {\r\n    _state: StateType\r\n    getState: () => StateType\r\n    _callSubscriber: () => void\r\n    // addPost: (postMessage: string) => void\r\n    // updateNewPostText: (newText: string) => void\r\n    subscribe: (observer: () => void) => void\r\n    dispatch: (action: ActionTypes) => void\r\n}\r\nexport type ActionTypes = AddPostActionType | UpdatePostActionType\r\ntype AddPostActionType = {\r\n    type: \"ADD-POST\"\r\n    postMessage: string\r\n}\r\ntype UpdatePostActionType = {\r\n    type: \"UPDATE-POST-TEXT\"\r\n    newText: string\r\n}\r\n\r\nexport let store: StoreType = {\r\n    _state: {\r\n        dialogs: {\r\n            dialogsData: [\r\n                { id: \"1\", name: \"Anna\" },\r\n                { id: \"2\", name: \"Dimych\" },\r\n                { id: \"3\", name: \"Kelvin\" },\r\n                { id: \"4\", name: \"Eliza\" },\r\n                { id: \"5\", name: \"Matt\" },\r\n                { id: \"6\", name: \"Connor\" }\r\n            ],\r\n            messagesData: [\r\n                { id: \"1\", message: \"hi\" },\r\n                { id: \"2\", message: \"How are you?\" },\r\n                { id: \"3\", message: \"It's cool!!\" },\r\n                { id: \"4\", message: \"Nice!\" },\r\n                { id: \"5\", message: \" \" },\r\n                { id: \"6\", message: \"Im sexy\" },\r\n            ],\r\n\r\n        },\r\n        profile: {\r\n            postData: [\r\n                { id: \"1\", message: \"My first post\", src: \"http://pm1.narvii.com/6889/74979d4d2744ec6e27995b6e866f091d04c0b40cr1-515-414v2_uhq.jpg\", likeCount: \"23\" },\r\n                { id: \"2\", message: \"Hey friends!!!\", src: \"https://i.pinimg.com/236x/74/05/5f/74055f83bfbdc20fdc1f9d1fc116fd26.jpg\", likeCount: \"1\" },\r\n                { id: \"3\", message: \"Wow it's cool\", src: \"https://avatarko.ru/img/kartinka/2/Gubka_Bob.jpg\", likeCount: \"12\" },\r\n                { id: \"4\", message: \"very very good job\", src: \"http://pm1.narvii.com/6889/74979d4d2744ec6e27995b6e866f091d04c0b40cr1-515-414v2_uhq.jpg\", likeCount: \"32\" },\r\n                { id: \"5\", message: \"My second post\", src: \"https://www.meme-arsenal.com/memes/be50e6ba99654b5455027dcc82beb5b3.jpg\", likeCount: \"4\" },\r\n            ],\r\n            newPostText: \"it=kamasutra.com\",\r\n            profileData: [\r\n                { background: \"https://demo.qodeinteractive.com/central/wp-content/uploads/2013/05/header.jpg\", ava: \"Ava\" }\r\n            ],\r\n\r\n        }\r\n    },\r\n    _callSubscriber() {\r\n        console.log(\"sad\")\r\n    },\r\n    getState() {\r\n        return this._state\r\n    },\r\n    subscribe(observer: () => void) {\r\n        this._callSubscriber = observer   //Наблюдатель паттерн\r\n    },\r\n\r\n    //!Функции для изменения UI\r\n    // //TODO Создаем функцию для добавления нового поста на стену\r\n    // addPost(postMessage: string) {\r\n    //     let newPost: PostDataType = {\r\n    //         id: \"5\",\r\n    //         message: postMessage,\r\n    //         src: \"https://cdn140.picsart.com/330959057057201.jpg\",\r\n    //         likeCount: \"0\"\r\n    //     }\r\n    //     this._state.profile.postData.push(newPost);\r\n    //     this._callSubscriber();\r\n    // },\r\n    // //TODO Создаем функцию FLUX круговорота для textarea\r\n    // updateNewPostText(newText: string) {\r\n    //     this._state.profile.newPostText = newText;\r\n    //     this._callSubscriber()\r\n    // },\r\n    //TODO ВВодим dispatch\r\n    dispatch(action) {   //action - обьект который имеет {type: \"ADD-POST\"}\r\n        if (action.type === \"ADD-POST\") {\r\n            let newPost: PostDataType = {\r\n                id: \"5\",\r\n                message: action.postMessage,\r\n                src: \"https://cdn140.picsart.com/330959057057201.jpg\",\r\n                likeCount: \"0\"\r\n            }\r\n            this._state.profile.postData.push(newPost);\r\n            this._callSubscriber();\r\n        }\r\n        else if (action.type === \"UPDATE-POST-TEXT\") {\r\n            this._state.profile.newPostText = action.newText;\r\n            this._callSubscriber()\r\n        }\r\n    }\r\n\r\n}","import React from 'react';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport './App.css';\r\nimport { Dialogs } from './components/Dialogs/Dialogs';\r\nimport { Header } from './components/Header/Header';\r\nimport { Navbar } from './components/Navbar/Navbar';\r\nimport { Profile } from './components/Profile/Profile';\r\nimport { Music } from './components/Music/Music';\r\nimport { News } from './components/News/News';\r\nimport { Setting } from './components/Setting/Setting';\r\nimport { store, StoreType } from './redux/state';\r\n\r\ntype AppPropsType = {\r\n  store: StoreType\r\n}\r\n\r\nfunction App(props: AppPropsType) {\r\n  const appState = store.getState();\r\n  return (\r\n    <BrowserRouter>\r\n      <div className='app-wrapper'>\r\n        <Header />\r\n        <Navbar />\r\n        <div className=\"app-wrapper-content\">\r\n          <Route render={() => <Dialogs\r\n            dialogsData={appState.dialogs.dialogsData}\r\n            messagesData={appState.dialogs.messagesData}\r\n          />} path=\"/dialogs\" />\r\n          <Route render={() => <Profile\r\n            postData={appState.profile.postData}\r\n            profileData={appState.profile.profileData}\r\n            dispatch={store.dispatch.bind(props.store)}\r\n            newPostText={appState.profile.newPostText}\r\n          />} path=\"/profile\" />\r\n          <Route render={() => <News />} path=\"/news\" />\r\n          <Route render={() => <Music />} path=\"/music\" />\r\n          <Route render={() => <Setting />} path=\"/setting\" />\r\n        </div>\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { store } from './redux/state';\r\nimport './index.css';\r\n\r\n\r\nlet rerenderEntireTree =()=> {\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App store={store}/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n}\r\n\r\n\r\nrerenderEntireTree();\r\nstore.subscribe(rerenderEntireTree)\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2h0ef\",\"item\":\"Navbar_item__22eW8\",\"active\":\"Navbar_active__A2NPC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1aqog\",\"dialogsItems\":\"Dialogs_dialogsItems__2974J\",\"dialog\":\"Dialogs_dialog__SZ_g3\",\"messageItems\":\"Dialogs_messageItems__1TdIq\",\"message\":\"Dialogs_message__kZH15\"};"],"sourceRoot":""}