{"version":3,"sources":["components/Header/Header.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Dialogs/DialogItems/DialogItem.tsx","components/Dialogs/Messages/Message.tsx","components/Dialogs/Dialogs.tsx","redux/dialogsReducer.tsx","components/Header/Header.tsx","components/Navbar/Navbar.tsx","redux/profileReducer.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Music/Music.tsx","components/News/News.tsx","components/Setting/Setting.tsx","redux/sidebarReducer.tsx","redux/store.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/Navbar/Navbar.module.css","components/Dialogs/Dialogs.module.css"],"names":["module","exports","DialogItem","props","className","d","dialog","active","to","id","name","Message","message","mes","Dialogs","dialogsElements","dialogsData","map","messageElements","messagesData","m","dialogs","dialogsItems","messageItems","placeholder","value","newMessageBody","onChange","e","dispatch","type","body","currentTarget","onClick","Header","hed","header","src","alt","title","Navbar","classes","nav","item","activeClassName","updatePostTextActionCreator","newText","Post","post","likeCount","MyPosts","postElement","posts","p","newPostElement","React","createRef","mypost","block","area","ref","newPostText","text","current","postMessage","addPostActionCreator","ProfileInfo","content","background","ava","Profile","profileData","postData","Music","News","Setting","store","_state","profile","sidebar","_callSubscriber","console","log","getState","this","subscribe","observer","action","state","newPost","push","profileReducer","dialogsReducer","App","appState","render","bind","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rerenderEntireTree","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ce917dc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2IiT1\",\"title\":\"Header_title__1PnPN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"MyPosts_block__1KfWR\",\"area\":\"MyPosts_area__3QX9_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1drbq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProfileInfo_content__1ydn2\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport d from \"./../Dialogs.module.css\"\r\n\r\n\r\n\r\ntype DialogItemType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nexport function DialogItem(props: DialogItemType) {\r\n    return (\r\n        <div className={`${d.dialog} ${d.active}`}>\r\n            <NavLink to={`/dialogs/${props.id}`}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport d from \"./../Dialogs.module.css\"\r\n\r\n\r\nexport type MessageType = {\r\n    mes: string\r\n}\r\n\r\nexport function Message(props: MessageType) {\r\n    return (\r\n        <div className={d.message}>{props.mes}</div>\r\n    )\r\n}\r\n\r\n","import React, { ChangeEvent } from 'react';\r\nimport { DialogsType } from '../../redux/store';\r\nimport { sendMessageCreator,  updateNewMessageBodyCreator } from '../../redux/dialogsReducer';\r\nimport { DialogItem } from './DialogItems/DialogItem';\r\nimport d from \"./Dialogs.module.css\"\r\nimport { Message } from './Messages/Message';\r\n\r\n\r\n\r\nexport function Dialogs(props: DialogsType) {\r\n    const dialogsElements = props.dialogsData.map(d => <DialogItem name={d.name} id={d.id} />);\r\n    const messageElements = props.messagesData.map(m => <Message mes={m.message} />);\r\n    const onSendMessageClick = () => {props.dispatch(sendMessageCreator())};\r\n    const onNewMessageChange =(e:ChangeEvent<HTMLTextAreaElement>) => {props.dispatch(updateNewMessageBodyCreator(e.currentTarget.value))}\r\n    return (\r\n        <div className={d.dialogs}>\r\n            <div className={d.dialogsItems}>\r\n                {dialogsElements}\r\n\r\n            </div>\r\n\r\n            <div className={d.messageItems}>\r\n                <div>{messageElements}</div>\r\n                <div>\r\n                    <div><textarea placeholder=\"Enter your message\" value={props.newMessageBody} onChange={onNewMessageChange}></textarea> </div>\r\n                    <div><button onClick={onSendMessageClick}>Send</button></div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import { ActionTypes, DialogsStateType, SendMessageType, UpdateNewMessageType } from \"./store\";\r\n\r\n\r\nexport const dialogsReducer = (state: DialogsStateType, action:ActionTypes) => {\r\n    switch(action.type) {\r\n        case \"UPDATE-NEW-MESSAGE-BODY\":\r\n            state.newMessageBody = action.body;\r\n            return state;\r\n        case \"SEND-MESSAGE\": \r\n        let body = state.newMessageBody;\r\n        state.newMessageBody = \"\";\r\n        state.messagesData.push({ id: \"7\", message: body },)\r\n        return state;\r\n        default: return state;\r\n    }\r\n}\r\n\r\n//TODO----------------------создаем ACTION-CREATORS----------\r\nexport const updateNewMessageBodyCreator = (body: string): UpdateNewMessageType => {\r\n    return {\r\n        type: \"UPDATE-NEW-MESSAGE-BODY\",\r\n        body: body\r\n    }\r\n}\r\nexport const sendMessageCreator = (): SendMessageType => {\r\n    return {\r\n        type: \"SEND-MESSAGE\",\r\n\r\n\r\n    }\r\n}","import React from 'react';\r\nimport hed from './Header.module.css';\r\n\r\nexport function Header(props: any) {\r\n    return (\r\n        <header className={hed.header}>\r\n            <img src=\"https://i.ibb.co/yV486Q1/logo.png\" alt=\"Logo\" />\r\n            <span className={hed.title}>Free Land</span>\r\n        </header>)\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport classes from './Navbar.module.css'\r\n\r\n\r\nexport function Navbar() {\r\n    return (\r\n        <nav className={classes.nav}>\r\n            <div className={classes.item} ><NavLink to=\"/profile\" activeClassName={classes.active}> Profile</NavLink></div>\r\n            <div className={classes.item}><NavLink to=\"/dialogs\" activeClassName={classes.active}>Messages</NavLink></div>\r\n            <div className={classes.item}><NavLink to=\"/news\" activeClassName={classes.active}>News</NavLink></div>\r\n            <div className={classes.item}><NavLink to=\"/music\" activeClassName={classes.active}>Music</NavLink></div>\r\n            <div className={classes.item}><NavLink to=\"/setting\" activeClassName={classes.active}>Setting</NavLink></div>\r\n        </nav>\r\n    )\r\n}","import { ActionTypes, AddPostActionType, PostDataType, ProfileStateType, StateType, UpdatePostActionType } from \"./store\";\r\n\r\n\r\nexport const profileReducer = (state: ProfileStateType, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case \"ADD-POST\":\r\n            let newPost: PostDataType = {\r\n                id: \"5\",\r\n                message: action.postMessage,\r\n                src: \"https://cdn140.picsart.com/330959057057201.jpg\",\r\n                likeCount: \"0\"\r\n            };\r\n            state.postData.push(newPost);\r\n            return state;\r\n        case \"UPDATE-POST-TEXT\":\r\n            state.newPostText = action.newText;\r\n            return state;\r\n        default: return state;\r\n    }\r\n}\r\n\r\n//TODO----------------------создаем ACTION-CREATORS----------\r\nexport const addPostActionCreator = (text: string): AddPostActionType => {\r\n    return {\r\n        type: \"ADD-POST\",\r\n        postMessage: text\r\n    }\r\n}\r\nexport const updatePostTextActionCreator = (newText: string): UpdatePostActionType => {\r\n    return {\r\n        type: \"UPDATE-POST-TEXT\",\r\n        newText: newText\r\n    }\r\n}","import React from 'react';\r\nimport post from './Post.module.css'\r\n\r\n\r\nexport type PostType1 = {\r\n    message: string\r\n    src: string\r\n    likeCount: string\r\n    \r\n}\r\n\r\nexport function Post(props: PostType1) {\r\n    return (\r\n\r\n        <div className={post.item}>\r\n            <img src={props.src} alt=\"\" />\r\n            {props.message}\r\n            <button>Like({props.likeCount})</button>\r\n            <button>DisLike</button>\r\n        </div>\r\n\r\n\r\n    )\r\n}","import React from 'react';\r\nimport { ActionTypes, PostDataType} from '../../../redux/store';\r\nimport {  addPostActionCreator, updatePostTextActionCreator} from '../../../redux/profileReducer';\r\nimport mypost from './MyPosts.module.css'\r\nimport { Post } from './Post/Post';\r\n\r\n\r\ntype MyPostType = {\r\n    posts: Array<PostDataType>\r\n    newPostText: string\r\n    dispatch: (action: ActionTypes) => void\r\n}\r\n\r\n\r\n\r\nexport function MyPosts(props: MyPostType) {\r\n\r\n    const postElement = props.posts.map(p => <Post message={p.message} src={p.src} likeCount={p.likeCount} />)\r\n\r\n    const newPostElement = React.createRef<HTMLTextAreaElement>();\r\n    const addPost = () => {\r\n        let text = newPostElement.current?.value; //  newPostElement.current &&  newPostElement.current.value; (Если элемент существует то возьмем его значение)\r\n        if (text) {\r\n            props.dispatch(addPostActionCreator(text))\r\n        };\r\n        props.dispatch(updatePostTextActionCreator(\"\"))\r\n    }\r\n    const onPostChange = (e: any) => {\r\n        props.dispatch(updatePostTextActionCreator(e.currentTarget.value))\r\n    }\r\n    // const onPostChange = () => {\r\n    //     let text = newPostElement.current?.value;\r\n    //     props.updateNewPostText(text);\r\n    // }\r\n    return (\r\n        <div className={mypost.block}>\r\n            <h3>My posts</h3>\r\n            <div >\r\n                <div>\r\n                    <textarea className={mypost.area} ref={newPostElement} value={props.newPostText} onChange={onPostChange} />\r\n                </div>\r\n                <div>\r\n                    <button onClick={addPost}>Add Post</button>\r\n                </div>\r\n            </div>\r\n            {postElement}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { ProfileDataType } from '../../../redux/store';\r\nimport p from './ProfileInfo.module.css'\r\n\r\n\r\n\r\n\r\nexport function ProfileInfo(props: ProfileDataType) {\r\n  return (\r\n    <div className={p.content}>\r\n      <img src={props.background} alt=\"\" />\r\n      <div>{props.ava} </div>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport { ProfileType } from '../../redux/store';\r\nimport { MyPosts } from './MyPosts/MyPosts';\r\nimport prof from './Profile.module.css'\r\nimport { ProfileInfo } from './ProfileInfo/ProfileInfo';\r\n\r\n\r\n\r\n\r\nexport function Profile(props: ProfileType) {\r\n  return (\r\n    <div className=\"container\">\r\n      <ProfileInfo background={props.profileData[0].background} ava={props.profileData[0].ava} />\r\n      <MyPosts posts={props.postData} newPostText={props.newPostText} dispatch={props.dispatch} />\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\n\r\n\r\nexport function Music(props: any) {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\n\r\nexport function News(props: any) {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\n\r\nexport function Setting(props: any) {\r\n    return (\r\n        <div>\r\n            Setting\r\n        </div>\r\n    )\r\n}","import { ActionTypes } from \"./store\";\r\n\r\nexport const sidebarReducer = (state:any, action:ActionTypes) => {\r\n\r\n    return state;\r\n}","import { dialogsReducer } from \"./dialogsReducer\"\r\nimport { profileReducer } from \"./profileReducer\"\r\nimport { sidebarReducer } from \"./sidebarReducer\"\r\n\r\n\r\nexport type UserType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nexport type UserMessageType = {\r\n    id: string\r\n    message: string\r\n}\r\n\r\nexport type PostDataType = {\r\n    id: string\r\n    message: string\r\n    src: string\r\n    likeCount: string\r\n}\r\n\r\nexport type ProfileDataType = {\r\n    background: string\r\n    ava: string\r\n}\r\n\r\nexport type DialogsType = {\r\n    dialogsData: Array<UserType>\r\n    messagesData: Array<UserMessageType>\r\n    newMessageBody: string\r\n    dispatch: (action: ActionTypes) => void\r\n}\r\n\r\nexport type DialogsStateType = {\r\n    dialogsData: Array<UserType>\r\n    messagesData: Array<UserMessageType>\r\n    newMessageBody: string\r\n}\r\nexport type ProfileType = {\r\n    postData: Array<PostDataType>\r\n    newPostText: string\r\n    profileData: Array<ProfileDataType>\r\n    dispatch: (action: ActionTypes) => void\r\n}\r\nexport type ProfileStateType = {\r\n    postData: Array<PostDataType>\r\n    newPostText: string\r\n    profileData: Array<ProfileDataType>\r\n}\r\nexport type StateType = {\r\n    dialogs: DialogsStateType\r\n    profile: ProfileStateType\r\n    sidebar: any\r\n}\r\nexport type StoreType = {\r\n    _state: StateType\r\n    getState: () => StateType\r\n    _callSubscriber: () => void\r\n    // addPost: (postMessage: string) => void\r\n    // updateNewPostText: (newText: string) => void\r\n    subscribe: (observer: () => void) => void\r\n    dispatch: (action: ActionTypes) => void\r\n}\r\nexport type ActionTypes = AddPostActionType | UpdatePostActionType | UpdateNewMessageType | SendMessageType\r\nexport type AddPostActionType = {\r\n    type: \"ADD-POST\"\r\n    postMessage: string\r\n}\r\n// export type AddPostActionType = ReturnType<typeof addPostActionCreator>\r\nexport type UpdatePostActionType = {\r\n    type: \"UPDATE-POST-TEXT\"\r\n    newText: string\r\n}\r\nexport type UpdateNewMessageType = {\r\n    type: \"UPDATE-NEW-MESSAGE-BODY\"\r\n    body: string\r\n}\r\nexport type SendMessageType = {\r\n    type: \"SEND-MESSAGE\"\r\n\r\n}\r\n\r\n//!BLL----------------------STORE----------\r\nexport let store: StoreType = {\r\n    _state: {\r\n        dialogs: {\r\n            dialogsData: [\r\n                { id: \"1\", name: \"Anna\" },\r\n                { id: \"2\", name: \"Dimych\" },\r\n                { id: \"3\", name: \"Kelvin\" },\r\n                { id: \"4\", name: \"Eliza\" },\r\n                { id: \"5\", name: \"Matt\" },\r\n                { id: \"6\", name: \"Connor\" }\r\n            ],\r\n            messagesData: [\r\n                { id: \"1\", message: \"hi\" },\r\n                { id: \"2\", message: \"How are you?\" },\r\n                { id: \"3\", message: \"It's cool!!\" },\r\n                { id: \"4\", message: \"Nice!\" },\r\n                { id: \"5\", message: \" \" },\r\n                { id: \"6\", message: \"Im sexy\" },\r\n            ],\r\n            newMessageBody: \"\",\r\n\r\n\r\n        },\r\n        profile: {\r\n            postData: [\r\n                { id: \"1\", message: \"My first post\", src: \"http://pm1.narvii.com/6889/74979d4d2744ec6e27995b6e866f091d04c0b40cr1-515-414v2_uhq.jpg\", likeCount: \"23\" },\r\n                { id: \"2\", message: \"Hey friends!!!\", src: \"https://i.pinimg.com/236x/74/05/5f/74055f83bfbdc20fdc1f9d1fc116fd26.jpg\", likeCount: \"1\" },\r\n                { id: \"3\", message: \"Wow it's cool\", src: \"https://avatarko.ru/img/kartinka/2/Gubka_Bob.jpg\", likeCount: \"12\" },\r\n                { id: \"4\", message: \"very very good job\", src: \"http://pm1.narvii.com/6889/74979d4d2744ec6e27995b6e866f091d04c0b40cr1-515-414v2_uhq.jpg\", likeCount: \"32\" },\r\n                { id: \"5\", message: \"My second post\", src: \"https://www.meme-arsenal.com/memes/be50e6ba99654b5455027dcc82beb5b3.jpg\", likeCount: \"4\" },\r\n            ],\r\n            newPostText: \"it=kamasutra.com\",\r\n            profileData: [\r\n                { background: \"https://demo.qodeinteractive.com/central/wp-content/uploads/2013/05/header.jpg\", ava: \"Ava\" }\r\n            ],\r\n\r\n\r\n        },\r\n        sidebar: {},\r\n    },\r\n    _callSubscriber() {\r\n        console.log(\"sad\")\r\n    },\r\n    getState() {\r\n        return this._state\r\n    },\r\n    subscribe(observer: () => void) {\r\n        this._callSubscriber = observer   //Наблюдатель паттерн\r\n    },\r\n\r\n    //!Функции для изменения UI\r\n    // //TODO Создаем функцию для добавления нового поста на стену\r\n    // addPost(postMessage: string) {\r\n    //     let newPost: PostDataType = {\r\n    //         id: \"5\",\r\n    //         message: postMessage,\r\n    //         src: \"https://cdn140.picsart.com/330959057057201.jpg\",\r\n    //         likeCount: \"0\"\r\n    //     }\r\n    //     this._state.profile.postData.push(newPost);\r\n    //     this._callSubscriber();\r\n    // },\r\n    // //TODO Создаем функцию FLUX круговорота для textarea\r\n    // updateNewPostText(newText: string) {\r\n    //     this._state.profile.newPostText = newText;\r\n    //     this._callSubscriber()\r\n    // },\r\n    //TODO ВВодим dispatch\r\n    dispatch(action) {   //action - обьект который имеет Как минимум тайп{type: \"ADD-POST\"}\r\n        this._state.profile = profileReducer(this._state.profile, action);\r\n        this._state.dialogs = dialogsReducer(this._state.dialogs, action);\r\n        this._state.sidebar = sidebarReducer(this._state.sidebar, action);\r\n        this._callSubscriber()\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport './App.css';\r\nimport { Dialogs } from './components/Dialogs/Dialogs';\r\nimport { Header } from './components/Header/Header';\r\nimport { Navbar } from './components/Navbar/Navbar';\r\nimport { Profile } from './components/Profile/Profile';\r\nimport { Music } from './components/Music/Music';\r\nimport { News } from './components/News/News';\r\nimport { Setting } from './components/Setting/Setting';\r\nimport { store, StoreType } from './redux/store';\r\n\r\ntype AppPropsType = {\r\n  store: StoreType\r\n}\r\n\r\nfunction App(props: AppPropsType) {\r\n  const appState = store.getState();\r\n  return (\r\n    <BrowserRouter>\r\n      <div className='app-wrapper'>\r\n        <Header />\r\n        <Navbar />\r\n        <div className=\"app-wrapper-content\">\r\n          <Route render={() => <Dialogs\r\n            dialogsData={appState.dialogs.dialogsData}\r\n            messagesData={appState.dialogs.messagesData}\r\n            newMessageBody={appState.dialogs.newMessageBody}\r\n            dispatch={store.dispatch.bind(props.store)}\r\n          />} path=\"/dialogs\" />\r\n          <Route render={() => <Profile\r\n            postData={appState.profile.postData}\r\n            profileData={appState.profile.profileData}\r\n            dispatch={store.dispatch.bind(props.store)}\r\n            newPostText={appState.profile.newPostText}\r\n          />} path=\"/profile\" />\r\n          <Route render={() => <News />} path=\"/news\" />\r\n          <Route render={() => <Music />} path=\"/music\" />\r\n          <Route render={() => <Setting />} path=\"/setting\" />\r\n        </div>\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { store } from './redux/store';\r\nimport './index.css';\r\n\r\n\r\nlet rerenderEntireTree =()=> {\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App store={store}/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n}\r\n\r\n\r\nrerenderEntireTree();\r\nstore.subscribe(rerenderEntireTree)\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2h0ef\",\"item\":\"Navbar_item__22eW8\",\"active\":\"Navbar_active__A2NPC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1aqog\",\"dialogsItems\":\"Dialogs_dialogsItems__2974J\",\"dialog\":\"Dialogs_dialog__SZ_g3\",\"messageItems\":\"Dialogs_messageItems__1TdIq\",\"message\":\"Dialogs_message__kZH15\"};"],"sourceRoot":""}